#include "mbed.h"
#include <cstdio>
#include <ctime>
#include <cstring>
#include <array>

using namespace std::chrono_literals;

// —— CONFIGURATION ——
constexpr int CODE_LEN       = 4;
constexpr int LOG_CAPACITY   = 5;
constexpr float TEMP_LIMIT   = 50.0f;    // °C threshold
constexpr auto DEBOUNCE_TIME = 200ms;
constexpr auto POLL_PERIOD   = 10ms;

// —— HARDWARE PINS ——
DigitalOut rowPins[4] = { DigitalOut(PB_3), DigitalOut(PB_5), DigitalOut(PC_7), DigitalOut(PA_15) };
DigitalIn  colPins[4] = { DigitalIn(PB_12, PullUp), DigitalIn(PB_13, PullUp), DigitalIn(PB_15, PullUp), DigitalIn(PC_6, PullUp) };

AnalogIn   tempSensor(A1);
DigitalIn  gasSensor(PE_12, PullUp);   // LOW = gas detected
DigitalOut alarmLed(LED1);
PwmOut     buzzer(PE_10);

UnbufferedSerial console(USBTX, USBRX, 115200);

// —— KEYPAD MAP & SCAN ——
const char keymap[4][4] = {
    { '1','2','3','A' },
    { '4','5','6','B' },
    { '7','8','9','C' },
    { '*','0','#','D' }
};
char scanKey() {
    for (int r = 0; r < 4; ++r) {
        for (int i = 0; i < 4; ++i) rowPins[i] = 1;
        rowPins[r] = 0;
        for (int c = 0; c < 4; ++c) {
            if (colPins[c] == 0) return keymap[r][c];
        }
    }
    return '\0';
}

// —— EVENT LOG STORAGE ——
array<time_t, LOG_CAPACITY> eventLog = {};
int logHead = 0;
int logSize = 0;
time_t lastLoggedTime = 0;

// —— STATE TRACKERS ——
bool prevAlarmState = false;
char codeBuffer[CODE_LEN] = {};
int  codeIdx = 0;
char lastKey = '\0';

// —— HELPERS ——
void recordAlarm() {
    time_t now = time(NULL);
    if (now != lastLoggedTime) {
        lastLoggedTime = now;
        // store in circular buffer
        eventLog[(logHead + logSize) % LOG_CAPACITY] = now;
        if (logSize < LOG_CAPACITY) {
            ++logSize;
        } else {
            logHead = (logHead + 1) % LOG_CAPACITY;
        }
        // immediate print
        char buf[64];
        int n = snprintf(buf, sizeof(buf), "ALARM at %s", ctime(&now));
        console.write(buf, n);
    }
}

void dumpLog() {
    console.write("\r\nLast 5 alarm events:\r\n", 25);
    for (int i = 0; i < logSize; ++i) {
        int idx = (logHead + i) % LOG_CAPACITY;
        char buf[64];
        int n = snprintf(buf, sizeof(buf), "%s", ctime(&eventLog[idx]));
        console.write(buf, n);
    }
}

int main() {
    // Initialize RTC to a known time (e.g., May 5 2025 14:30:00)
    struct tm tm0 = { .tm_year=2025-1900, .tm_mon=4, .tm_mday=5,
                     .tm_hour=14, .tm_min=30, .tm_sec=0 };
    set_time(mktime(&tm0));

    // Buzzer off
    buzzer.period(1.0f/2000.0f);
    buzzer.write(0.0f);

    // Startup prompt
    const char *prompt = "\r\nEnter 4-digit code to deactivate alarm:\r\n";
    console.write(prompt, strlen(prompt));

    while (true) {
        // —— A) Keypad entry & log dump on '#'
        char k = scanKey();
        if (k && k != lastKey) {
            ThisThread::sleep_for(DEBOUNCE_TIME);
            lastKey = k;
            if (k != '#' && codeIdx < CODE_LEN) {
                codeBuffer[codeIdx++] = k;
                console.write("*", 1);
            } else if (k == '#') {
                if (codeIdx == 0) {
                    dumpLog();
                }
                // reset code buffer
                codeIdx = 0;
                memset(codeBuffer, 0, CODE_LEN);
            }
        } else if (!k) {
            lastKey = '\0';
        }

        // —— B) Sensor read & raw alarm condition
        float tempC = (tempSensor.read() * 3.3f) / 0.01f;
        bool gas   = (gasSensor.read() == 0);
        bool rawAlarm = gas || (tempC > TEMP_LIMIT);

        // —— C) Rising-edge detect & record
        if (rawAlarm && !prevAlarmState) {
            recordAlarm();
        }
        prevAlarmState = rawAlarm;

        // —— D) Outputs
        alarmLed = rawAlarm;
        buzzer.write(rawAlarm ? 0.5f : 0.0f);

        ThisThread::sleep_for(POLL_PERIOD);
    }
}
